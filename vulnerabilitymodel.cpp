#include<iostream>
#include<fstream>
#include<vector>
#include<sstream>

#include "vulnerabilitymodel.h"
#include "interpolation.h"
#include "stdafx.h"
#include "alglibinternal.h"
#include "alglibmisc.h"
#include "ap.h"
#include "dataanalysis.h"
#include "diffequations.h"
#include "fasttransforms.h"
#include "integration.h"
#include "linalg.h"
#include "optimization.h"
#include "solvers.h"
#include "specialfunctions.h"
#include "statistics.h"

float    VulnerabilityModel::getCurveStandardDeviation(unsigned iStrcutural)
{
    return 0.64; //to be changed in the future
}
unsigned VulnerabilityModel::getNumberOfStructuralType(){
    return numberOfStructuralTypes;
}
unsigned int VulnerabilityModel::getNumberOfDamageStatesForStructuralType(unsigned int){
    return numberOfDamageState;
}
double VulnerabilityModel::getDamageStateCurveValue(double _PGA,unsigned int iStructural,unsigned int iDamageState){
    double out=0;
    out=alglib::spline1dcalc(fragilityCurve[iStructural][iDamageState],_PGA);
    if(out<0)
        out=0; // for probable fragility errors
    else if(out>1)
        out=1;
    return out;
}

VulnerabilityModel::VulnerabilityModel(vector<string> config_file,unsigned number_not_for_vulnerability){
    vector<string> _FEMAFileName;
    for(unsigned i=number_not_for_vulnerability;i<config_file.size();i++)
    {
        _FEMAFileName.push_back(config_file[i]);
    }

    numberOfStructuralTypes=0;
    numberOfDamageState=0;
    for(unsigned j=0;j<_FEMAFileName.size();j++){
        numberOfStructuralTypes++;
        string   line;
        ifstream file(_FEMAFileName[j].c_str(),ifstream::in);
        vector<vector<double> > data;
        while(getline(file, line))
        {
            vector<double> lineData;
            stringstream  linestream(line);
            double value;
            while(linestream >> value)
            {
                lineData.push_back(value);
            }
            data.push_back(lineData);
        }
        alglib::real_1d_array x;
        vector<alglib::real_1d_array> dataArray;
        unsigned number_of_damagestate=data[0].size();
        unsigned number_of_datalines=data.size();
        numberOfDamageState=number_of_damagestate-1;// if this variable is going to be a vector, it should get out of the upper for scope
        cout<<"numberOfDamageState="<<numberOfDamageState<<endl;
        dataArray.resize(number_of_damagestate);
        x.setlength(number_of_datalines);
        for(unsigned i=0;i<number_of_damagestate;i++)
            dataArray[i].setlength(number_of_datalines);
        unsigned c=0;
        for(unsigned i=0;i<number_of_datalines;i++){
            if(i==0){
                x[c]=data[i][0];
                for(unsigned l=0;l<number_of_damagestate;l++)
                    dataArray[l][c]=data[i][l+1];
                                    cout<<c<<endl;

                c++;
            }
            else if(double(x[c-1])<double(data[i][0]))
            {
                x[c]=data[i][0];
                for(unsigned l=0;l<number_of_damagestate;l++)
                    dataArray[l][c]=data[i][l+1];
                c++;
            }
        }
        vector<alglib::spline1dinterpolant> splinetemp;
        splinetemp.resize(dataArray.size());
        try{
            for(unsigned l=0;l<dataArray.size();l++)
                alglib::spline1dbuildcatmullrom(x, dataArray[l],c,0,0,splinetemp[l]);
        }
        catch(alglib::ap_error e){
            cout<<"An error happen when trying to make interpolation parameters."<<endl;
            cout<<e.msg<<endl;
            getch();
        }
        vector<alglib::spline1dinterpolant> splineRow;
        for(unsigned l=0;l<dataArray.size();l++)
            splineRow.push_back(splinetemp[l]);
        fragilityCurve.push_back(splineRow);
        file.close();
    }

    string con_name="monetary_ratio.txt";
    ifstream file(con_name.c_str(),ifstream::in);
    if(file.good())
    {
        string   line;
        while(getline(file, line))
        {
            vector<float> lineData;
            stringstream  linestream(line);
            float value;
            while(linestream >> value)
            {
                lineData.push_back(value);
            }
            damageStateToMonetaryLossRatio.push_back(lineData);
        }
    }
    else
    {
        cout<<"error in opening file "<<con_name.c_str()<<endl;
        exit(1);
    }



    cout<<"VULNERABILITYMODEL Constructor ended."<<endl;
}
