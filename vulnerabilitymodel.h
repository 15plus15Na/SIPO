#pragma once
#ifndef VULNERABILITYMODEL_H_INCLUDED
#define VULNERABILITYMODEL_H_INCLUDED
#include<iostream>
#include<fstream>
#include<vector>
#include<sstream>
#include <conio.h>

#include "interpolation.h"
#include "stdafx.h"
#include "alglibinternal.h"
#include "alglibmisc.h"
#include "ap.h"
#include "dataanalysis.h"
#include "diffequations.h"
#include "fasttransforms.h"
#include "integration.h"
#include "linalg.h"
#include "optimization.h"
#include "solvers.h"
#include "specialfunctions.h"
#include "statistics.h"

using namespace std;

class VulnerabilityModel{
    private:
        vector<vector<alglib::spline1dinterpolant> >    fragilityCurve;
        unsigned numberOfStructuralTypes;
        unsigned numberOfDamageState;
        vector<vector<unsigned int> > structureFragilityRelationship;
        vector<vector<float> >        damageStateToMonetaryLossRatio;
    public:
        float    getCurveStandardDeviation(unsigned);
        unsigned getNumberOfStructuralType();
        unsigned getNumberOfDamageStatesForStructuralType(unsigned);
        double   getDamageStateCurveValue(double , unsigned , unsigned);
        float    getDamageStateToMonetaryLossRatio(unsigned , unsigned);
        VulnerabilityModel(vector<string> , unsigned);
        friend class Property;
};

inline float VulnerabilityModel::getDamageStateToMonetaryLossRatio(unsigned iStructural,unsigned iDamageState)
{
    if(iStructural<5)
    {
        switch(iDamageState)
        {
        case 0:
            {
                return 0.02;
            }
        case 1:
            {
                return 0.1;
            }
        case 2:
            {
                return 0.5;
            }
        case 3:
            {
                return 1;
            }
        default:
            {
                cout<<"No valid damage state. returning 0"<<endl;
                getch();
            }
        }
    }
    else if (iStructural>=5 && iStructural<9)
    {
        return 1;
    }
    return 0;
}

#endif // VULNERABILITYMODEL_H_INCLUDED
